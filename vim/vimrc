if exists("+undofile")
    if isdirectory($HOME . '/.vim/_undo') == 0
        :silent !mkdir -p ~/.vim/_undo > /dev/null 2>&1
    endif
    set undodir=./.vim-undo//,~/.vim/_undo//
    set undofile
endif

let mapleader = " "

" Plug
call plug#begin('~/.vim/plugged')

let g:ctrlp_map = ''
nnore <Leader>o :CtrlP<CR>
nnore <Leader>b :CtrlPBuffer<CR>
nnore <Leader>; :CtrlPTag<CR>
nnore <Leader>, :CtrlPBufTag<CR>
let g:ctrlp_use_caching = 1
let g:ctrlp_clear_cache_on_exit = 1
" If rg is available use it as filename list generator instead of 'find'
if executable("rg")
  let g:ctrlp_user_command = 'rg -i --hidden --files %s'
endif
Plug 'ctrlpvim/ctrlp.vim'

xmap <CR> <Plug>(EasyAlign)
Plug 'junegunn/vim-easy-align', { 'on': ['<Plug>(EasyAlign)'] }

Plug 'thomasfaingnaert/vim-lsp-snippets'
Plug 'thomasfaingnaert/vim-lsp-ultisnips'

Plug 'mattn/emmet-vim'
Plug 'SirVer/ultisnips'
let g:UltiSnipsEditSplit           = 'vertical'
let g:UltiSnipsExpandTrigger       = "<nul>"
let g:UltiSnipsListSnippets        = "<nul>"
let g:ulti_expand_or_jump_res = 0 "default value, just set once
function! UltiExpandAndEmmet()
  call UltiSnips#ExpandSnippetOrJump()
  if !g:ulti_expand_or_jump_res | call feedkeys("\<C-Y>,") | endif
  return ""
endfunction
inoremap <c-j> <C-R>=UltiExpandAndEmmet()<CR>
xnoremap <silent> <c-j> :call UltiSnips#SaveLastVisualSelection()<cr>gvs
augroup ultisnip
  autocmd!
  autocmd FileType typescriptreact UltiSnipsAddFiletypes javascript_react
  autocmd BufNewFile,BufRead *.stories.tsx UltiSnipsAddFiletypes typescript_storybook
augroup END

let g:qf_mapping_ack_style = 1
let g:qf_window_bottom = 0
let g:qf_loclist_window_bottom = 0
nmap <leader>c <Plug>(qf_qf_toggle)
nmap <leader>l <Plug>(qf_loc_toggle)
nmap <silent> <leader>z :pclose<CR>
Plug 'romainl/vim-qf'

nnoremap <silent> <leader>tt :TestNearest<CR>
nnoremap <silent> <leader>tf :TestFile<CR>
nnoremap <silent> <leader>ta :TestSuite<CR>
nnoremap <silent> <leader>tl :TestLast<CR>
nnoremap <silent> <leader>tg :TestVisit<CR>
let test#strategy = 'dispatch'
let g:test#javascript#jest#file_pattern = '\v((/__tests__/.*)|((\.|/)(test|spec)))\.[jt]sx?$'
Plug 'janko-m/vim-test', { 'on': ['TestFile', 'TestLast', 'TestNearest', 'TestSuite', 'TestVisit'] }

Plug 'justinmk/vim-dirvish'
Plug 'bronson/vim-trailing-whitespace'
let g:tcomment_textobject_inlinecomment = ''
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'christoomey/vim-tmux-navigator'
Plug 'sgur/vim-editorconfig'


Plug 'cohama/lexima.vim'
let g:closetag_xhtml_filenames = '*.jsx,*.tsx'
let g:closetag_filetypes = 'html,typescriptreact'
Plug 'alvan/vim-closetag'

let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_signs_error = {'text': 'Ã—'}
let g:lsp_signs_warning = {'text': '!'}
let g:lsp_signs_hint = {'text': 'i'}
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'

let g:slime_target = "vimterminal"
let g:slime_vimterminal_config = { "vertical": v:true, "term_finish": "close" }
Plug 'jpalardy/vim-slime'

nnoremap <leader>d :Dispatch<Space>
nnoremap <leader>D :FocusDispatch<Space>
Plug 'tpope/vim-dispatch'

let g:asyncomplete_popup_delay = 256
function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
endfunction
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : <SID>check_back_space() ? "\<Tab>" : "\<C-P>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <CR>    pumvisible() ? asyncomplete#close_popup(). "\<CR>" : "\<CR>"
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'prabirshrestha/asyncomplete-file.vim'
Plug 'prabirshrestha/asyncomplete-ultisnips.vim'
augroup RegisterAsyncompleteSource
  autocmd!
  function! s:register_asyncomplete() abort
    call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
          \ 'name': 'file',
          \ 'allowlist': ['*'],
          \ 'priority': 10,
          \ 'completor': function('asyncomplete#sources#file#completor')
          \ }))
    call asyncomplete#register_source(asyncomplete#sources#ultisnips#get_source_options({
        \ 'name': 'ultisnips',
        \ 'whitelist': ['*'],
        \ 'completor': function('asyncomplete#sources#ultisnips#completor'),
        \ }))
  endfunction
  autocmd User asyncomplete_setup call s:register_asyncomplete()
augroup END
Plug 'kana/vim-textobj-user'
Plug 'bps/vim-textobj-python'
Plug 'idbrii/textobj-word-column.vim'

let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_flow = 1
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
Plug 'maxmellon/vim-jsx-pretty', { 'for': ['javascript', 'typescriptreact'] }
Plug 'jparise/vim-graphql'

Plug 'cormacrelf/vim-colors-github'
Plug 'rhysd/vim-color-spring-night'
Plug 'arzg/vim-colors-xcode'

if filereadable(expand("~/.vimplug.local"))
    source ~/.vimplug.local
endif

call plug#end()

call lexima#add_rule({'char': '<CR>', 'at': '>\%#<', 'input_after': '<CR>'})

" set vim options
set autoindent
set backspace=indent,eol,start
set nrformats-=octal
set incsearch
set laststatus=2
set showcmd
set wildmenu
set completeopt+=menuone,noselect
set scrolloff=1 sidescrolloff=5
set display+=lastline
set formatoptions+=j " Delete comment character when joining commented lines
setglobal tags-=./tags tags-=./tags; tags^=./tags;
set autoread
set history=1000
if !empty(&viminfo)
    set viminfo='50,<20,s2,h
endif

set encoding=utf-8

set textwidth=80
set nowrap
set colorcolumn=+1 " Color column textwidth + 1

set shiftwidth=4
set expandtab
set smarttab

set hlsearch
set ignorecase " searches are case insensitive...
set smartcase " ... unless they contain at least one capital letter
set gdefault " use global flag by default

set belloff=all " no bell

set ambiwidth=single
set mouse=n " Enable mouse support normal mode only

set ttyfast
set lazyredraw
set updatetime=1000
set ttimeout timeout timeoutlen=800 ttimeoutlen=50
set synmaxcol=400

set nobackup noswapfile

" Natural split
set splitbelow
set splitright

set list " Show special characters for inivisible chars
set listchars=tab:>\ ,extends:>,precedes:<

set wildignore+=.git,*.swp,*~,._*

" mapping

nnoremap <leader>q :q<cr>
nnoremap <leader>w :update<CR>
nnoremap <leader>f :grep<space>
nnoremap <leader>e :edit <C-R>=fnameescape(expand('%:h')).'/'<cr>
nnoremap <leader>x :split <C-R>=fnameescape(expand('%:h')).'/'<cr>
nnoremap <leader>v :vsplit <C-R>=fnameescape(expand('%:h')).'/'<cr>

" calculator
xnoremap <leader>r c<C-R>=<C-R>"<CR><esc>

" easy move between windows
nnore <silent> <C-K> :wincmd k<CR>
nnore <silent> <C-J> :wincmd j<CR>
nnore <silent> <C-H> :wincmd h<CR>
nnore <silent> <C-L> :wincmd l<CR>

" Adjust viewports to the same size
nore <Leader>= <C-w>=

" Toggle paste mode
nmap <leader>4 <F4>
nnore <silent> <F4> :set invpaste<CR>:set paste?<CR>
set pastetoggle=<F4>

" expand current directory
cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<cr>
" expand home directory
cnoremap $$ <C-R>=fnameescape(expand('~')).'/'<cr>

" clear highlight
nnore <leader><CR> :noh<CR>

" In command-line mode, C-p use history to complete
cnoremap <C-P> <Up>

" replace last search
nnore s :%s//
xnore s :s//

" easy upper case
inoremap <c-u> <left><c-o>:normal gUiwea<CR><right>

" Easy copy-paste
xnoremap <leader>y "+y
nnoremap <leader>y "+y
xnoremap <leader>p "+p
nnoremap <leader>p "+p

" Magic search
nnoremap /  /\v
nnoremap ?  ?\v

" modified from unimpaired
function! s:MapNextFamily(map,cmd)
  let cmd = '".(v:count ? v:count : "")."'.a:cmd
  let end = '"<CR>'.(a:cmd == 'l' || a:cmd == 'c' ? 'zv' : '')
  execute 'nnoremap <silent> ['.a:map.' :<C-U>exe "'.cmd.'previous'.end
  execute 'nnoremap <silent> ]'.a:map.' :<C-U>exe "'.cmd.'next'.end
  execute 'nnoremap <silent> ['.toupper(a:map).' :<C-U>exe "'.cmd.'first'.end
  execute 'nnoremap <silent> ]'.toupper(a:map).' :<C-U>exe "'.cmd.'last'.end
  if exists(':'.a:cmd.'nfile')
    execute 'nnoremap <silent> [<C-'.a:map.'> :<C-U>exe "'.cmd.'pfile'.end
    execute 'nnoremap <silent> ]<C-'.a:map.'> :<C-U>exe "'.cmd.'nfile'.end
  endif
endfunction

call s:MapNextFamily('a','')
call s:MapNextFamily('b','b')
call s:MapNextFamily('l','l')
call s:MapNextFamily('q','c')
call s:MapNextFamily('t','t')

" insert blank line
nnoremap [<space> :<c-u>put! =repeat(nr2char(10), v:count1)<cr>'[
nnoremap ]<space> :<c-u>put =repeat(nr2char(10), v:count1)<cr>

" change cursor shape for urxvt, xterm,...
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>[6 q\<Esc>\\"
    let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>[4 q\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>[2 q\<Esc>\\"
else
    let &t_SI = "\<Esc>[6 q"
    let &t_SR = "\<Esc>[4 q"
    let &t_EI = "\<Esc>[2 q"
endif
" change cursor shape for urxvt, xterm,...
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>[6 q\<Esc>\\"
    let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>[4 q\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>[2 q\<Esc>\\"
else
    let &t_SI = "\<Esc>[6 q"
    let &t_SR = "\<Esc>[4 q"
    let &t_EI = "\<Esc>[2 q"
endif

" autocmd
augroup vimrc
    autocmd!

    " Remember last location in file, but not for commit messages.
    " see :help last-position-jump
    au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$")
                \| exe "normal! g`\"" | endif
augroup END

" User rg if possible
if executable("rg")
    set grepprg=rg\ -n
endif

" statusline
set statusline=%m                      " modified flag
set statusline+=\ \                    " separator
set statusline+=%f                     " Relative path to file
set statusline+=\ \                    " separator
set statusline+=%h                     " [help]
set statusline+=%r                     " read only flag
set statusline+=%w                     " preview window flag
set statusline+=%y                     " filetype
set statusline+=%=
set statusline+=[%{&fileencoding}]\ \  " file encoding
set statusline+=%-8(%l,%c%V%)          " Line, column-virtual column
set statusline+=\ %6P

function! SudoWrite()
    write !sudo tee %
    edit!
endfun
command! SudoWrite call SudoWrite()

" disable built-in plugins
let g:loaded_logipat       = 1
let g:loaded_tarPlugin     = 1
let g:loaded_tar           = 1
let g:loaded_gzip          = 1
let g:loaded_zipPlugin     = 1
let g:loaded_zip           = 1
let g:loaded_vimballPlugin = 1
let g:loaded_vimball       = 1
let g:loaded_netrw         = 1
let g:loaded_netrwPlugin   = 1
let g:loaded_2html_plugin  = 1

" setup lsp
function! s:findRoot(marker, ...) abort
  let l:path = a:0 > 1 ? a:1 : expand('%')
  let l:fullPath = fnamemodify(l:path, ':p')
  let l:dir = l:fullPath

  while 1
    " go up 1 lvel
    let l:dir = fnamemodify(l:dir, ':h')
    if l:dir == '/'
      return ''
    endif
    let l:filename = l:dir.'/'.a:marker
    if filereadable(l:filename) || isdirectory(l:filename)
      return l:dir
    endif
  endwhile
endfunction

function! s:getJsLsp() abort
  let l:pkgRoot = s:findRoot('package.json')
  if filereadable(l:pkgRoot.'/.flowconfig')
    " flow prj
    let l:flowbinRoot = s:findRoot('node_modules/.bin/flow', l:pkgRoot)
    if !empty(l:flowbinRoot)
      return l:flowbinRoot.'/node_modules/.bin/flow lsp --lazy-mode ide --from vim'
    endif
  endif
  return 'typescript-language-server --stdio'
endfunction

function! s:setup_lsp_servers() abort
  call lsp#register_server({
        \ 'name': 'javascript-lsp',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, s:getJsLsp()]},
        \ 'allowlist': ['javascript', 'javascript.jsx', 'typescript', 'typescriptreact'],
        \ })
endfunction

function! s:lspSetting() abort
  nmap <buffer> ga     <plug>(lsp-code-action)
  nmap <buffer> gd     <plug>(lsp-definition)
  nmap <buffer> gD     <plug>(lsp-peek-definition)
  nmap <buffer> go     <plug>(lsp-document-symbol)
  nmap <buffer> K      <plug>(lsp-hover)
  nmap <buffer> <c-n>  <plug>(lsp-next-diagnostic)
  nmap <buffer> <c-p>  <plug>(lsp-previous-diagnostic)
  nmap <buffer> gr     <plug>(lsp-references)
  nmap <buffer> gR     <plug>(lsp-rename)
  nmap <buffer> gS     <plug>(lsp-workspace-symbol)
  nmap <buffer> gC     <plug>(lsp-document-diagnostics)
  nmap <buffer> gm     <plug>(lsp-document-format)

  setlocal signcolumn=yes
  setlocal omnifunc=lsp#complete
  if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
endfunction

augroup LspSetting
  autocmd!
  autocmd User lsp_setup call s:setup_lsp_servers()
  autocmd User lsp_buffer_enabled call s:lspSetting()

  autocmd InsertEnter * highlight link LspErrorHighlight NONE
  autocmd InsertLeave * highlight link LspErrorHighlight Error
augroup END

" read .vimrc.local
if filereadable(expand("~/.vimrc.local"))
    source ~/.vimrc.local
endif
